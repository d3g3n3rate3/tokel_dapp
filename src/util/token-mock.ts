import { TokelStandardDataFormat, TokenDetail } from './token-types';

const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));
const simulateCall = async (response: unknown) => {
  await sleep(Math.round(Math.random() * 300 + 100));
  return response;
};

// tokenAddress
type TokenAddressArgs = {
  address: string;
};

type TokenAddressResponse = {
  result: string;
  balances: Record<string, number>;
};

export const tokenAddress = async ({ address }: TokenAddressArgs) => {
  console.log(address);
  const response = await simulateCall({
    result: 'success',
    balances: {
      '8d091fa784c304ba1974057f958253e4cd3c36847853645efeb201db65926f5e': 1,
      '428f4d075c042f16cc9ff6166fb88598321de8dd08838c51335642d2c85eed8e': 100,
      '77294cc9ff6166fb88598321de8dd088d075c042f1638c51335642d2c85eed8e': 4500,
      '99f6166fb88598321de8dd0888f4d075c042f16cc9f38c51335642d2c85eed8e': 1,
    },
  });
  return response as TokenAddressResponse;
};

// tokenBalance
type TokenBalanceArgs = {
  pubKey: string;
  tokenId: string;
};

export const tokenBalance = async ({ pubKey, tokenId }: TokenBalanceArgs) => {
  console.log(tokenId, pubKey);
  const response = await simulateCall({
    result: 'success',
    CCaddress: 'RVXdnHvxuAYYuupD2EukpkAwjfaU81jSrz',
    tokenid: 'a283693b37b3bd94edd91ba31345310a9b47946c626cb14189d67931a0cde705',
    balance: 1,
  });
  return response;
};

// tokenInfoTokel
// type TokenInfoTokelArgs = {
//   tokenId: string;
// };

export const tokenInfoTokel = async (tokenId: string): Promise<TokenDetail> => {
  console.log(tokenId);
  const response = await simulateCall(
    {
      '8d091fa784c304ba1974057f958253e4cd3c36847853645efeb201db65926f5e': {
        result: 'success',
        tokenid: '8d091fa784c304ba1974057f958253e4cd3c36847853645efeb201db65926f5e',
        owner: '02ed3fcb2ace8a53cd8ed5350dc53c507167ad39238ba70345e51764c6d517e6ee',
        name: 'NFTShowcase',
        supply: 1,
        description:
          'This NFT creation example showcases using a single satoshi in the supply field to create 1 token. It also shows how I can add the image into the URL, and use the arbitrary data field to add additional properties to my NFT. 50% of the value of all trades conducted via assets RPCs will be sent to the creators address.',
        data:
          '7b226964223a312c2275726c223a2268747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f546f6b656c506c6174666f726d2f746f6b656c5f6170702f646576656c6f706d656e742f6272616e645f7061636b6167652f6173736574732f746f6b656c78332e706e67222c22726f79616c7479223a3530302c22617262697472617279223a223762323237333639376136353232336132303331333033303263323236333666366336663732323233613230323236373666366336343232326332323737363536313730366636653232336132303232373736663732363437333232326332323665373536643632363537323232336132303331333233333764227d',
        dataAsJson: {
          id: 1,
          url:
            'https://raw.githubusercontent.com/TokelPlatform/tokel_app/development/brand_package/assets/tokelx3.png',
          royalty: 500,
          arbitrary:
            '7b2273697a65223a203130302c22636f6c6f72223a2022676f6c64222c22776561706f6e223a2022776f726473222c226e756d626572223a203132337d',
        },
        version: 1,
        IsMixed: 'yes',
      },
      '77294cc9ff6166fb88598321de8dd088d075c042f1638c51335642d2c85eed8e': {
        result: 'success',
        tokenid: '77294cc9ff6166fb88598321de8dd088d075c042f1638c51335642d2c85eed8e',
        owner: '02ed3fcb2ace8a53cd8ed5350dc53c507167ad39238ba70345e51764c6d517e6ee',
        name: 'La Brisa Token',
        supply: 999999999,
        description:
          'Tokens that get you special perks at La Brisa, the more you own the better the perks!',
        data:
          '7b226964223a312c2275726c223a2268747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f546f6b656c506c6174666f726d2f746f6b656c5f6170702f646576656c6f706d656e742f6272616e645f7061636b6167652f6173736574732f746f6b656c78332e706e67222c22726f79616c7479223a3530302c22617262697472617279223a223762323237333639376136353232336132303331333033303263323236333666366336663732323233613230323236373666366336343232326332323737363536313730366636653232336132303232373736663732363437333232326332323665373536643632363537323232336132303331333233333764227d',
        dataAsJson: {
          id: 1,
          url:
            'https://raw.githubusercontent.com/TokelPlatform/tokel_app/development/brand_package/assets/tokelx3.png',
          royalty: 0,
        },
        version: 1,
        IsMixed: 'yes',
      },
      '99f6166fb88598321de8dd0888f4d075c042f16cc9f38c51335642d2c85eed8e': {
        result: 'success',
        tokenid: '99f6166fb88598321de8dd0888f4d075c042f16cc9f38c51335642d2c85eed8e',
        owner: '02ed3fcb2ace8a53cd8ed5350dc53c507167ad39238ba70345e51764c6d517e6ee',
        name: 'My Little Pony',
        supply: 1,
        description: 'This is an NFT depicting one of the amazing ponies from My Little Pony!',
        data:
          '7b226964223a312c2275726c223a2268747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f546f6b656c506c6174666f726d2f746f6b656c5f6170702f646576656c6f706d656e742f6272616e645f7061636b6167652f6173736574732f746f6b656c78332e706e67222c22726f79616c7479223a3530302c22617262697472617279223a223762323237333639376136353232336132303331333033303263323236333666366336663732323233613230323236373666366336343232326332323737363536313730366636653232336132303232373736663732363437333232326332323665373536643632363537323232336132303331333233333764227d',
        dataAsJson: {
          id: 1,
          url: 'https://en.wikipedia.org/wiki/My_Little_Pony',
          royalty: 10,
          arbitrary:
            '7b2273697a65223a203130302c22636f6c6f72223a2022676f6c64222c22776561706f6e223a2022776f726473222c226e756d626572223a203132337d',
        },
        version: 1,
        IsMixed: 'yes',
      },
      '428f4d075c042f16cc9ff6166fb88598321de8dd08838c51335642d2c85eed8e': {
        result: 'success',
        tokenid: '428f4d075c042f16cc9ff6166fb88598321de8dd08838c51335642d2c85eed8e',
        owner: '02ed3fcb2ace8a53cd8ed5350dc53c507167ad39238ba70345e51764c6d517e6ee',
        name: 'Bitcoin Conference 2022',
        supply: 30000,
        description: 'Each token will get you one entry to Bitcoin Conference 2022',
        data:
          '7b226964223a312c2275726c223a2268747470733a2f2f6769746875622e636f6d2f546f6b656c506c6174666f726d2f746f6b656c5f6170702f626c6f622f646576656c6f706d656e742f6173736574732f746f6b656c2d6865616465722e706e67222c22726f79616c7479223a393939392c22617262697472617279223a22376232323632363136653634323233613232346536393732373636313665363132323263323237363635366537353635323233613232343836663735373336353230366636363230343236633735363537333232326332323734363936643635373337343631366437303232336133313336333233393338333733393337333533393337333633393764227d',
        dataAsJson: {
          id: 1,
          url: 'https://b.tc/conference/',
          royalty: 5,
          arbitrary:
            '7b2262616e64223a224e697276616e61222c2276656e7565223a22486f757365206f6620426c756573222c2274696d657374616d70223a313632393837393735393736397d',
        },
        version: 1,
        IsMixed: 'yes',
      },
    }[tokenId]
  );
  return response as TokenDetail;
};

// tokenList
type TokenListArgs = {
  beginHeight?: number;
  endHeight?: number;
};

export const tokenList = async ({ beginHeight, endHeight }: TokenListArgs) => {
  console.log(beginHeight, endHeight);
  const response = await simulateCall([
    '5efd03ac08eac8e075320ffe6a3bb6b9593a55231b7b3c8752d76b8814e96b04',
    'b6ccd393052944f9c6aee83711585c8cc3b1be6ba3c95c31f31401a891bdbf1f',
    '8b1fbb05db52f5e273ddaad24046fe705cbd9feebe5727bf27764fec721a2a3d',
    '8d091fa784c304ba1974057f958253e4cd3c36847853645efeb201db65926f5e',
    '5509c6e019ce1e592badda96823890e5d83d56b08c2af277ae6c39720fa61968',
    'fc6df1be0e84be874f86d3a1b9b9bdcf6b2d0fc02438f0784e27b9ee08106575',
    '5da2731e5b1b21a0d446fb7b64203e5f57134b662bda9d30ab9ac54abf2cc37b',
    '5040a4770793d85993f1420707b4e1eafc76851190bb63ba88e7f40216ff0d80',
    'f3ef3ed5a9a26245ab09e7d0e6ade2e5bd053c27315be0184ee17fc58c3ab083',
    '428f4d075c042f16cc9ff6166fb88598321de8dd08838c51335642d2c85eed8e',
    '8903e66e56221726fdbf8b361a07afe33a54bb2c5a2fe1df463ed606a20f4395',
    '5ff88aaf58ae1d04c6b9c41a22dd66d9872411b8ca25fd5ee1ccdcb80aaba4ca',
    'b905d627b3967405521f2aa2f8ab8aed70a4e474ec62df52db07965e29a3f5cb',
    '14fc2fbd6777b31a24d505e97d597b27771263c0d0acfcf14c1d9326bad2b8cc',
    '30902e829d335f748403434ca442cfae06c9bdd34249e289657c23585a1e82d7',
    'a85eac6f1894e24c4e07ca4f96849bfcbbf1f24bd27efa1a1d1f60a033f5e6e1',
    '3a027eff750bb69d918390f592005b36a0dbd368166ee28b46663bd84e88b0f8',
  ]);
  return response;
};

// tokenCreateTokel
type TokenCreateTokelArgs = {
  name: string;
  supply: number;
  description: string;
  tokenData?: TokelStandardDataFormat;
};

export const tokenCreateTokel = async ({
  name,
  supply,
  description,
  tokenData,
}: TokenCreateTokelArgs) => {
  console.log(name, supply, description, tokenData);
  const response = await simulateCall({
    result: 'success',
    hex:
      '0400008085202f89010053c31a8c74b875040db6808f95a70af35ff895b534d973332e861270815223000000004847304402206e624bc5ae94124c817db37592d49e6094d7d265c94fb497167489246fe4023f02206b38f5211da0f958bf3834e6684e5b6ee5cc0450665ff007d07ad783d547b21001ffffffff041027000000000000403e4da23ba00aa003800102af038001f5a12da22b802096fec31e85a06720706ef9214c9c8b2df26940aac250e1d80f23a772b18b5a4a810302040082020204cc01000000000000006e434da240a00fa003800103af038001f5af038001f7a12da22b802049163d1ec6309fc2cbc07fc13a3951bc938fd15263b0eceb4bcea6d164c0fccb810302040082020204cc270402f701012102ed3fcb2ace8a53cd8ed5350dc53c507167ad39238ba70345e51764c6d517e6ee75df92f50500000000232102ed3fcb2ace8a53cd8ed5350dc53c507167ad39238ba70345e51764c6d517e6eeac0000000000000000fd25026a4d2102f563012102ed3fcb2ace8a53cd8ed5350dc53c507167ad39238ba70345e51764c6d517e6ee0b4e465453686f7763617365fd3d0154686973204e4654206372656174696f6e206578616d706c652073686f776361736573207573696e6720612073696e676c65207361746f73686920696e2074686520737570706c79206669656c6420746f20637265617465203120746f6b656e2e20497420616c736f2073686f777320686f7720492063616e206164642074686520696d61676520696e746f207468652055524c2c20616e642075736520746865206172626974726172792064617461206669656c6420746f20616464206164646974696f6e616c2070726f7065727469657320746f206d79204e46542e20353025206f66207468652076616c7565206f6620616c6c2074726164657320636f6e647563746564207669612061737365747320525043732077696c6c2062652073656e7420746f207468652063726561746f727320616464726573732eaff701026668747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f546f6b656c506c6174666f726d2f746f6b656c5f6170702f646576656c6f706d656e742f6272616e645f7061636b6167652f6173736574732f746f6b656c78332e706e67010103fdf401043d7b2273697a65223a203130302c22636f6c6f72223a2022676f6c64222c22776561706f6e223a2022776f726473222c226e756d626572223a203132337d00000000b83f00000000000000000000000000',
  });
  return response;
};

// tokenTransfer
type TokenTransferArgs = {
  tokenId: string;
  destPubKey: string;
  amount: number;
};

export const tokenTransfer = async ({ tokenId, destPubKey, amount }: TokenTransferArgs) => {
  console.log(tokenId, destPubKey, amount);
  const response = await simulateCall({
    result: 'success',
    hex:
      '0400008085202f8902cc9c0dd602fe8f947a7d48d1033e2c555447567cec8bffc0d81c9719de22738d020000004847304402200ac4ec79ed4c60307d4eb66bece4dca4e347ce8f016100ce83ed5113cc86211902203dda7eb751f7016e600a62c102fa4eaeb2c83c1336667657ab139e8d8e75924301ffffffffcc9c0dd602fe8f947a7d48d1033e2c555447567cec8bffc0d81c9719de22738d010000007b4c79a276a072a26ba067a565802102ed3fcb2ace8a53cd8ed5350dc53c507167ad39238ba70345e51764c6d517e6ee8140d3a7e35af97ab89719ffd8fd529ab5eb077be6906ee20957981f42b34c6d9e3c0277f560742064011e128bdcb0037b303a11c984236ea27fed6789387abbba31a100af038001f5a10001ffffffff046400000000000000403e4da23ba00aa003800102af038001f5a12da22b8020bd7d036361bcc894a9704512e386909c5b141541ebbf99b564b6e792b188bee8810302040082020204cc9ce0f50500000000403e4da23ba00aa003800102af038001f5a12da22b802049163d1ec6309fc2cbc07fc13a3951bc938fd15263b0eceb4bcea6d164c0fccb810302040082020204ccc01ec44a7c8d0300232102ed3fcb2ace8a53cd8ed5350dc53c507167ad39238ba70345e51764c6d517e6eeac0000000000000000256a23f574018d7322de19971cd8c0ff8bec7c564754552c3e03d1487d7a948ffe02d60d9ccc000000001e0400000000000000000000000000',
  });
  return response;
};

// tokenTransferMany
type TokenTransferManyArgs = {
  tokenIds: Array<string>;
  destPubKey: string;
  amount: number;
};

export const tokenTransferMany = async ({
  tokenIds,
  destPubKey,
  amount,
}: TokenTransferManyArgs) => {
  console.log(tokenIds, destPubKey, amount);
  const response = await simulateCall({
    result: 'success',
    hex:
      '0400008085202f8902cc9c0dd602fe8f947a7d48d1033e2c555447567cec8bffc0d81c9719de22738d020000004847304402200ac4ec79ed4c60307d4eb66bece4dca4e347ce8f016100ce83ed5113cc86211902203dda7eb751f7016e600a62c102fa4eaeb2c83c1336667657ab139e8d8e75924301ffffffffcc9c0dd602fe8f947a7d48d1033e2c555447567cec8bffc0d81c9719de22738d010000007b4c79a276a072a26ba067a565802102ed3fcb2ace8a53cd8ed5350dc53c507167ad39238ba70345e51764c6d517e6ee8140d3a7e35af97ab89719ffd8fd529ab5eb077be6906ee20957981f42b34c6d9e3c0277f560742064011e128bdcb0037b303a11c984236ea27fed6789387abbba31a100af038001f5a10001ffffffff046400000000000000403e4da23ba00aa003800102af038001f5a12da22b8020bd7d036361bcc894a9704512e386909c5b141541ebbf99b564b6e792b188bee8810302040082020204cc9ce0f50500000000403e4da23ba00aa003800102af038001f5a12da22b802049163d1ec6309fc2cbc07fc13a3951bc938fd15263b0eceb4bcea6d164c0fccb810302040082020204ccc01ec44a7c8d0300232102ed3fcb2ace8a53cd8ed5350dc53c507167ad39238ba70345e51764c6d517e6eeac0000000000000000256a23f574018d7322de19971cd8c0ff8bec7c564754552c3e03d1487d7a948ffe02d60d9ccc000000001e0400000000000000000000000000',
  });
  return response;
};
